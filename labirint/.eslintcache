[{"C:\\Users\\chipset.by\\Desktop\\finLab2\\rsclone\\labirint\\src\\index.js":"1","C:\\Users\\chipset.by\\Desktop\\finLab2\\rsclone\\labirint\\src\\App.js":"2","C:\\Users\\chipset.by\\Desktop\\finLab2\\rsclone\\labirint\\src\\reportWebVitals.js":"3","C:\\Users\\chipset.by\\Desktop\\finLab2\\rsclone\\labirint\\src\\components\\js\\canvas.js":"4","C:\\Users\\chipset.by\\Desktop\\finLab2\\rsclone\\labirint\\src\\components\\jsx\\Header.jsx":"5","C:\\Users\\chipset.by\\Desktop\\finLab2\\rsclone\\labirint\\src\\components\\jsx\\Menu.jsx":"6","C:\\Users\\chipset.by\\Desktop\\finLab2\\rsclone\\labirint\\src\\components\\jsx\\Footer.jsx":"7","C:\\Users\\chipset.by\\Desktop\\finLab2\\rsclone\\labirint\\src\\components\\jsx\\Cover.jsx":"8","C:\\Users\\chipset.by\\Desktop\\finLab2\\rsclone\\labirint\\src\\components\\js\\keypressFn.js":"9","C:\\Users\\chipset.by\\Desktop\\finLab2\\rsclone\\labirint\\src\\components\\js\\gameMap.js":"10","C:\\Users\\chipset.by\\Desktop\\finLab2\\rsclone\\labirint\\src\\components\\js\\show-menu.nav.js":"11","C:\\Users\\chipset.by\\Desktop\\finLab2\\rsclone\\labirint\\src\\components\\js\\show-cover.nav.js":"12","C:\\Users\\chipset.by\\Desktop\\finLab2\\rsclone\\labirint\\src\\components\\js\\play-mouse-hover.sound.js":"13","C:\\Users\\chipset.by\\Desktop\\finLab2\\rsclone\\labirint\\src\\components\\js\\sound-settings.data.js":"14"},{"size":501,"mtime":1612087690018,"results":"15","hashOfConfig":"16"},{"size":725,"mtime":1612087689884,"results":"17","hashOfConfig":"16"},{"size":362,"mtime":1612087659102,"results":"18","hashOfConfig":"16"},{"size":14935,"mtime":1612201107712,"results":"19","hashOfConfig":"16"},{"size":452,"mtime":1612087690000,"results":"20","hashOfConfig":"16"},{"size":825,"mtime":1612087690001,"results":"21","hashOfConfig":"16"},{"size":827,"mtime":1612087689998,"results":"22","hashOfConfig":"16"},{"size":287,"mtime":1612087689997,"results":"23","hashOfConfig":"16"},{"size":2559,"mtime":1612087659097,"results":"24","hashOfConfig":"16"},{"size":1301,"mtime":1612194570911,"results":"25","hashOfConfig":"16"},{"size":290,"mtime":1612189893100,"results":"26","hashOfConfig":"16"},{"size":173,"mtime":1612087689991,"results":"27","hashOfConfig":"16"},{"size":286,"mtime":1612087689989,"results":"28","hashOfConfig":"16"},{"size":91,"mtime":1612087689994,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"n4d4pe",{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"C:\\Users\\chipset.by\\Desktop\\finLab2\\rsclone\\labirint\\src\\index.js",[],["60","61"],"C:\\Users\\chipset.by\\Desktop\\finLab2\\rsclone\\labirint\\src\\App.js",[],"C:\\Users\\chipset.by\\Desktop\\finLab2\\rsclone\\labirint\\src\\reportWebVitals.js",[],"C:\\Users\\chipset.by\\Desktop\\finLab2\\rsclone\\labirint\\src\\components\\js\\canvas.js",["62","63","64","65","66"],"import '../css/canvas.css';\nimport tilesetUrl from '../img/player.png';\nimport tile2 from '../img/222.png';\nimport { keyboard } from './keypressFn';\nimport { hitTestRectangle } from './keypressFn';\nimport { gameMap } from './gameMap';\n\nimport showMenu from './show-menu.nav';\nimport showCover from './show-cover.nav';\n\nlet ctx = null;\nconst titleW = 60, titleH = 60;\nconst mapW = 20, mapH = 20;\nlet currentSecond = 0, frameCount = 0, frameLasrSecond = 0;\nlet lastFrameTime = 0;\nlet gameTime = 0;\nlet gameSpeed = [\n  { name: 'normal', mult: 1 },\n  { name: 'slow', mult: 0.3 },\n  { name: 'fast', mult: 3 },\n  { name: 'paused', mult: 0 },\n];\n\nlet tileset = null;\nlet tileset2 = null;\n// let tilesetUrl = '../img/tileset.png';\nlet tilesetLoaded = false;\nlet currentSpeed = 0;\n\nlet floorTypes = {\n  solid: 0,\n  path: 1,\n  water: 2,\n  ice: 3,\n  conveyorU: 4,\n  conveyorD: 5,\n  conveyorL: 6,\n  conveyorR: 7,\n  grass: 8,\n};\nlet tileTypes = {\n  0: { colour: '#685b48', floor: floorTypes.solid, sprite: [{ x: 320, y: 320, w: 32, h: 32 }] },\n  1: { colour: '#5aa457', floor: floorTypes.path, sprite: [{ x: 0, y: 224, w: 32, h: 32 }] },\n  2: { colour: '#e8bd7a', floor: floorTypes.path, sprite: [{ x: 32, y: 224, w: 32, h: 32 }] },\n  3: { colour: '#286625', floor: floorTypes.solid, sprite: [{ x: 120, y: 0, w: 40, h: 40 }] },\n  4: {\n    colour: '#678fd9', floor: floorTypes.water, sprite: [\n      { x: 864, y: 192, w: 32, h: 32, d: 200 }]\n  },\n  5: { colour: '#eeeeff', floor: floorTypes.ice, sprite: [{ x: 64, y: 224, w: 32, h: 32 }] },\n  6: {\n    colour: '#cccccc', floor: floorTypes.conveyorL, sprite: [\n      { x: 0, y: 40, w: 40, h: 40, d: 200 }, { x: 40, y: 40, w: 40, h: 40, d: 200 },\n      { x: 80, y: 40, w: 40, h: 40, d: 200 }, { x: 120, y: 40, w: 40, h: 40, d: 200 }]\n  },\n  7: {\n    colour: '#cccccc', floor: floorTypes.conveyorR, sprite: [\n      { x: 120, y: 80, w: 40, h: 40, d: 200 }, { x: 80, y: 80, w: 40, h: 40, d: 200 },\n      { x: 40, y: 80, w: 40, h: 40, d: 200 }, { x: 0, y: 80, w: 40, h: 40, d: 200 }]\n  },\n  8: {\n    colour: '#cccccc', floor: floorTypes.conveyorD, sprite: [\n      { x: 160, y: 200, w: 40, h: 40, d: 200 }, { x: 160, y: 160, w: 40, h: 40, d: 200 },\n      { x: 160, y: 120, w: 40, h: 40, d: 200 }, { x: 160, y: 80, w: 40, h: 40, d: 200 }]\n  },\n  9: {\n    colour: '#cccccc', floor: floorTypes.conveyorU, sprite: [\n      { x: 200, y: 80, w: 40, h: 40, d: 200 }, { x: 200, y: 120, w: 40, h: 40, d: 200 },\n      { x: 200, y: 160, w: 40, h: 40, d: 200 }, { x: 200, y: 200, w: 40, h: 40, d: 200 }]\n  },\n  10: { colour: '#5aa457', floor: floorTypes.path, sprite: [{ x: 96, y: 224, w: 32, h: 32 }] },\n  11: { colour: '#e8bd7a', floor: floorTypes.path, sprite: [{ x: 128, y: 224, w: 32, h: 32 }] },\n\n\n}\nlet directions = {\n  up: 0,\n  right: 1,\n  down: 2,\n  left: 3\n}\nconst keysDown = {\n  37: false,\n  38: false,\n  39: false,\n  40: false,\n};\nlet player = new Character();\nlet tileEvent = {\n  23: drawBridge,\n  25: drawBridge,\n  121: function (c) { c.placeAt(1, 8); },\n  161: function (c) { c.placeAt(1, 6); },\n}\n\nfunction drawBridge() {\n  gameMap[toIndex(4, 5)] = (gameMap[toIndex(4, 5)] === 4 ? 2 : 4)\n}\nlet viewport = {\n  screen: [0, 0],\n  startTile: [0, 0],\n  endTile: [0, 0],\n  offset: [0, 0],\n  update: function (px, py) {\n    this.offset[0] = Math.floor((this.screen[0] / 2) - px);\n    this.offset[1] = Math.floor((this.screen[1] / 2) - py);\n\n    let tile = [\n      Math.floor(px / titleW),\n      Math.floor(py / titleH)\n    ];\n    this.startTile[0] = tile[0] - 1 -\n      Math.ceil((this.screen[0] / 2) / titleW);\n    this.startTile[1] = tile[1] - 1 -\n      Math.ceil((this.screen[1] / 2) / titleH);\n\n    if (this.startTile[0] < 0) { this.startTile[0] = 0; }\n    if (this.startTile[1] < 0) { this.startTile[1] = 0; }\n\n    this.endTile[0] = tile[0] + 1 +\n      Math.ceil((this.screen[0] / 2) / titleW);\n    this.endTile[1] = tile[1] + 1 +\n      Math.ceil((this.screen[1] / 2) / titleH);\n\n    if (this.endTile[0] >= mapW) { this.endTile[0] = mapW - 1; }\n    if (this.endTile[1] >= mapH) { this.endTile[1] = mapH - 1; }\n  }\n}\nfunction Character() {\n  this.tileFrom = [0, 0];\n  this.tileTo = [5, 5];\n  this.timeMoves = 0;\n  this.dimensions = [65, 65];\n  this.position = [20, 20];\n\n  this.delayMove = {};\n  this.delayMove[floorTypes.path] = 400;\n  this.delayMove[floorTypes.grass] = 800;\n  this.delayMove[floorTypes.ice] = 300;\n  this.delayMove[floorTypes.conveyorU] = 200;\n  this.delayMove[floorTypes.conveyorD] = 200;\n  this.delayMove[floorTypes.conveyorL] = 200;\n  this.delayMove[floorTypes.conveyorR] = 200;\n  this.direction = directions.down;\n\n  this.sprites = {};\n  // this.sprites[directions.idle] = [{ x: 0, y: 120, w: 30, h: 30, d: 200 }, { x: 0, y: 120, w: 30, h: 30, d: 200 }];\n  this.sprites[directions.up] = [{ x: 10, y: 10, w: 40, h: 47, d: 120 }, { x: 74, y: 10, w: 40, h: 47, d: 120 }, { x: 138, y: 10, w: 40, h: 47, d: 120 }, { x: 202, y: 10, w: 40, h: 47, d: 120 }, { x: 266, y: 10, w: 40, h: 47, d: 120 }, { x: 332, y: 10, w: 40, h: 47, d: 120 }, { x: 396, y: 10, w: 40, h: 47, d: 120 }, { x: 460, y: 10, w: 40, h: 47, d: 120 }, { x: 524, y: 10, w: 40, h: 47, d: 120 }];\n  this.sprites[directions.right] = [{ x: 10, y: 205, w: 40, h: 47, d: 120 }, { x: 74, y: 205, w: 40, h: 47, d: 120 }, { x: 138, y: 205, w: 40, h: 47, d: 120 }, { x: 202, y: 205, w: 40, h: 47, d: 120 }, { x: 266, y: 205, w: 40, h: 47, d: 120 }, { x: 332, y: 205, w: 40, h: 47, d: 120 }, { x: 396, y: 205, w: 40, h: 47, d: 120 }, { x: 460, y: 205, w: 40, h: 47, d: 120 }, { x: 524, y: 205, w: 40, h: 47, d: 120 }];\n  this.sprites[directions.down] = [{ x: 10, y: 142, w: 40, h: 47, d: 120 }, { x: 74, y: 142, w: 40, h: 47, d: 120 }, { x: 138, y: 142, w: 40, h: 47, d: 120 }, { x: 202, y: 142, w: 40, h: 47, d:120 }, { x: 266, y: 142, w: 40, h: 47, d: 120 }, { x: 332, y: 142, w: 40, h: 47, d: 120 }, { x: 396, y: 142, w: 40, h: 47, d: 120 }, { x: 460, y: 142, w: 40, h: 47, d: 120 }, { x: 524, y: 142, w: 40, h: 47, d: 120 }];\n  this.sprites[directions.left] = [{ x: 10, y: 78, w: 40, h: 47, d: 120 }, { x: 74, y: 78, w: 40, h: 47, d: 120 }, { x: 138, y: 78, w: 40, h: 47, d: 120 }, { x: 202, y: 78, w: 40, h: 47, d: 120 }, { x: 266, y: 78, w: 40, h: 47, d: 120 }, { x: 332, y: 78, w: 40, h: 47, d: 120 }, { x: 396, y: 78, w: 40, h: 47, d: 120 }, { x: 460, y: 78, w: 40, h: 47, d: 120 }, { x: 524, y: 78, w: 40, h: 47, d: 120 }];\n\n}\nCharacter.prototype.placeAt = function (x, y) {\n  this.tileFrom = [x, y];\n  this.tileTo = [x, y];\n  this.position = [((titleW * x) + ((titleW - this.dimensions[0]) / 2)),\n  ((titleH * y) + ((titleH - this.dimensions[1]) / 2))]\n}\nCharacter.prototype.processMovement = function (t) {\n  if ((this.tileFrom[0] === this.tileTo[0]) &&\n    (this.tileFrom[1] === this.tileTo[1])) {\n    return false;\n  }\n  let moveSpeed = this.delayMove[tileTypes[gameMap[toIndex(this.tileFrom[0], this.tileFrom[1])]].floor]\n  if ((t - this.timeMoves) >= moveSpeed) {\n    this.placeAt(this.tileTo[0], this.tileTo[1]);\n\n    if (typeof tileEvent[toIndex(this.tileTo[0], this.tileTo[1])] !== 'undefined') {\n      tileEvent[toIndex(this.tileTo[0], this.tileTo[1])](this);\n    }\n\n    let tileFloor = tileTypes[gameMap[toIndex(this.tileFrom[0], this.tileFrom[1])]].floor;\n\n    if (tileFloor === floorTypes.ice) {\n      if (this.canMoveDirection(this.direction)) {\n        this.moveDirection(this.direction, t);\n        finish();\n      }\n    }\n    else if (tileFloor === floorTypes.conveyorL && this.canMoveLeft()) { this.moveLeft(t); }\n    else if (tileFloor === floorTypes.conveyorR && this.canMoveRight()) { this.moveRight(t); }\n    else if (tileFloor === floorTypes.conveyorU && this.canMoveUp()) { this.moveUp(t); }\n    else if (tileFloor === floorTypes.conveyorD && this.canMoveDown()) { this.moveDown(t); }\n\n  }\n  else {\n    this.position[0] = (this.tileFrom[0] * titleW) +\n      ((titleW - this.dimensions[0]) / 2);\n    this.position[1] = (this.tileFrom[1] * titleH) +\n      ((titleH - this.dimensions[1]) / 2);\n\n    if (this.tileTo[0] !== this.tileFrom[0]) {\n      let diff = (titleW / moveSpeed) *\n        (t - this.timeMoves);\n      this.position[0] += (this.tileTo[0] < this.tileFrom[0] ? 0 - diff : diff);\n    }\n    if (this.tileTo[1] !== this.tileFrom[1]) {\n      let diff = (titleH / moveSpeed) *\n        (t - this.timeMoves);\n      this.position[1] += (this.tileTo[1] < this.tileFrom[1] ?\n        0 - diff : diff);\n    }\n    this.position[0] = Math.round(this.position[0]);\n    this.position[1] = Math.round(this.position[1]);\n  }\n  return true;\n};\nCharacter.prototype.canMoveTo = function (x, y) {\n  if (x < 0 || x >= mapW || y < 0 || y >= mapH) { return false; }\n  if (typeof this.delayMove[tileTypes[gameMap[toIndex(x, y)]].floor] == 'undefined') { return false; }\n  return true;\n}\nCharacter.prototype.canMoveUp = function () { return this.canMoveTo(this.tileFrom[0], this.tileFrom[1] - 1); };\nCharacter.prototype.canMoveDown = function () { return this.canMoveTo(this.tileFrom[0], this.tileFrom[1] + 1); };\nCharacter.prototype.canMoveLeft = function () { return this.canMoveTo(this.tileFrom[0] - 1, this.tileFrom[1]); };\nCharacter.prototype.canMoveRight = function () { return this.canMoveTo(this.tileFrom[0] + 1, this.tileFrom[1]); };\nCharacter.prototype.canMoveDirection = function (d) {\n  switch (d) {\n    case directions.up:\n      return this.canMoveUp();\n    case directions.down:\n      return this.canMoveDown();\n    case directions.left:\n      return this.canMoveLeft();\n    default:\n      return this.canMoveRight();\n  }\n}\nCharacter.prototype.moveLeft = function (t) { this.tileTo[0] -= 1; this.timeMoves = t; this.direction = directions.left; }\nCharacter.prototype.moveRight = function (t) { this.tileTo[0] += 1; this.timeMoves = t; this.direction = directions.right; }\nCharacter.prototype.moveUp = function (t) { this.tileTo[1] -= 1; this.timeMoves = t; this.direction = directions.up; }\nCharacter.prototype.moveDown = function (t) { this.tileTo[1] += 1; this.timeMoves = t; this.direction = directions.down; }\nCharacter.prototype.moveDirection = function (d, t) {\n  switch (d) {\n    case directions.up:\n      return this.moveUp(t);\n    case directions.down:\n      return this.moveDown(t);\n    case directions.left:\n      return this.moveLeft(t);\n    default:\n      return this.moveRight(t);\n  }\n}\nfunction toIndex(x, y) {\n  return ((y * mapW) + x);\n}\n\nlet canvas = document.createElement('canvas');\ncanvas.setAttribute('id', 'game');\n\n\nwindow.onload = function () {\n  document.body.append(canvas);\n  canvas.width = document.body.clientWidth;\n  canvas.height = document.body.clientHeight;\n  ctx = document.getElementById('game').getContext('2d');\n  // requestAnimationFrame(drawGame);\n  ctx.font = 'bold 10px sans-serif';\n\n  window.addEventListener('keydown', function (e) {\n    if (e.keyCode >= 37 && e.keyCode <= 40) {\n      keysDown[e.keyCode] = true;\n      player['animated'] = true;\n      // console.log(player);\n    }\n  })\n  window.addEventListener('keyup', function (e) {\n    if (e.keyCode >= 37 && e.keyCode <= 40) {\n      keysDown[e.keyCode] = false;\n      player['animated'] = false;\n    }\n    if (e.keyCode == 83) {\n      currentSpeed = (currentSpeed >= (gameSpeed.length - 1) ? 0 : currentSpeed + 1);\n    }\n  });\n\n  viewport.screen = [\n    document.getElementById('game').width,\n    document.getElementById('game').height\n  ];\n  tileset = new Image();\n  tileset2 = new Image();\n\n  tileset2.src = tilesetUrl;\n  tileset.src = tile2;\n\n  for (let x in tileTypes) {\n    tileTypes[x]['animated'] = tileTypes[x].sprite.length > 1 ? true : false;\n\n    if (tileTypes[x].animated) {\n      let t = 0;\n      for (let s in tileTypes[x].sprite) {\n        tileTypes[x].sprite[s]['start'] = t;\n\n        t += tileTypes[x].sprite[s].d;\n        tileTypes[x].sprite[s]['end'] = t;\n      }\n      tileTypes[x]['spriteDuration'] = t;\n    }\n  }\n  for(let g in player.sprites) {\n    if (player.sprites[g].length > 1){\n      let t = 0;\n      for (let f in player.sprites[g]){\n        player.sprites[g][f]['start'] = t;\n        t += player.sprites[g][f].d;\n        player.sprites[g][f]['end'] = t;\n      }\n      player['spriteDuration'] = t;\n      \n    }\n  \n  }\n}\nfunction getFrame(sprite, duration, time, animated) {\n  if (!animated) { return sprite[0]; }\n\n  time = time % duration;\n\n  for (let x in sprite) {\n    if (sprite[x].end >= time) { return sprite[x]; }\n  }\n}\nfunction getFramePlayer(sprite, duration, time, animated) {\n  if (!animated) { return sprite[0]; }\n\n  time = time % duration;\n\n  for (let x in sprite) {\n    if (sprite[x].end >= time) { return sprite[x]; }\n  }\n}\nif (player.position[0] > 956 && player.position[1] > 1136) {\n  finish()\n  ctx.fillStyle = '#ff0000';\n  ctx.fillText('finish' + frameLasrSecond, 10, 60);\n}\nfunction drawGame() {\n  if (ctx == null) { return; }\n\n  let currentFrameTime = Date.now();\n  let timeElapsed = currentFrameTime - lastFrameTime;\n  gameTime += Math.floor(timeElapsed * gameSpeed[currentSpeed].mult);\n\n  let sec = Math.floor(Date.now() / 1000);\n  if (sec !== currentSecond) {\n    currentSecond = sec;\n    frameLasrSecond = frameCount;\n    frameCount = 1;\n  }\n  else { frameCount++; }\n\n  if (!player.processMovement(gameTime) && gameSpeed[currentSpeed].mult != 0) {\n    if (keysDown[38] && player.canMoveUp()) { player.moveUp(gameTime); }\n    else if (keysDown[40] && player.canMoveDown()) { player.moveDown(gameTime); }\n    else if (keysDown[37] && player.canMoveLeft()) { player.moveLeft(gameTime); }\n    else if (keysDown[39] && player.canMoveRight()) { player.moveRight(gameTime); }\n\n  }\n\n  viewport.update(\n    player.position[0] + (player.dimensions[0] / 2),\n    player.position[1] + (player.dimensions[1] / 2),\n  );\n\n  ctx.fillStyle = '#000000';\n  ctx.fillRect(0, 0, viewport.screen[0], viewport.screen[1]);\n\n  for (let y = viewport.startTile[1]; y <= viewport.endTile[1]; y++) {\n    for (let x = viewport.startTile[0]; x <= viewport.endTile[0]; x++) {\n\n      let tile = tileTypes[gameMap[toIndex(x, y)]];\n      let sprite = getFrame(tile.sprite, tile.spriteDuration,\n        gameTime, tile.animated);\n      \n      ctx.drawImage(tileset,\n        sprite.x, sprite.y, sprite.w, sprite.h,\n        viewport.offset[0] + (x * titleW), viewport.offset[1] + (y * titleH),\n        titleW, titleH);\n    }\n  }\n  \n  let sprite = getFramePlayer(player.sprites[player.direction], player.spriteDuration, \n    gameTime, player.animated);\n\n  ctx.drawImage(tileset2,\n    sprite.x, sprite.y, sprite.w, sprite.h,\n    viewport.offset[0] + player.position[0], viewport.offset[1] + player.position[1],\n    player.dimensions[0], player.dimensions[1]);\n\n  ctx.fillStyle = '#ff0000';\n  ctx.font = 'bold 22px sans-serif';\n  ctx.fillText('FPS ' + frameLasrSecond, 10, 20);\n  ctx.fillText('Game speed ' + gameSpeed[currentSpeed].name, 10, 40);\n\n  \n  lastFrameTime = currentFrameTime;\n  requestAnimationFrame(drawGame);\n}\nfunction startGame(){\n  player.tileFrom = [1, 1];\n  player.tileTo = [15, 15];\n}\n\nfunction finish(){\n  showMenu();\n  showCover();\n}\n\nexport { drawGame, startGame} ;\n\n","C:\\Users\\chipset.by\\Desktop\\finLab2\\rsclone\\labirint\\src\\components\\jsx\\Header.jsx",[],"C:\\Users\\chipset.by\\Desktop\\finLab2\\rsclone\\labirint\\src\\components\\jsx\\Menu.jsx",[],"C:\\Users\\chipset.by\\Desktop\\finLab2\\rsclone\\labirint\\src\\components\\jsx\\Footer.jsx",[],"C:\\Users\\chipset.by\\Desktop\\finLab2\\rsclone\\labirint\\src\\components\\jsx\\Cover.jsx",[],"C:\\Users\\chipset.by\\Desktop\\finLab2\\rsclone\\labirint\\src\\components\\js\\keypressFn.js",[],"C:\\Users\\chipset.by\\Desktop\\finLab2\\rsclone\\labirint\\src\\components\\js\\gameMap.js",[],"C:\\Users\\chipset.by\\Desktop\\finLab2\\rsclone\\labirint\\src\\components\\js\\show-menu.nav.js",[],"C:\\Users\\chipset.by\\Desktop\\finLab2\\rsclone\\labirint\\src\\components\\js\\show-cover.nav.js",[],"C:\\Users\\chipset.by\\Desktop\\finLab2\\rsclone\\labirint\\src\\components\\js\\play-mouse-hover.sound.js",[],"C:\\Users\\chipset.by\\Desktop\\finLab2\\rsclone\\labirint\\src\\components\\js\\sound-settings.data.js",[],{"ruleId":"67","replacedBy":"68"},{"ruleId":"69","replacedBy":"70"},{"ruleId":"71","severity":1,"message":"72","line":4,"column":10,"nodeType":"73","messageId":"74","endLine":4,"endColumn":18},{"ruleId":"71","severity":1,"message":"75","line":5,"column":10,"nodeType":"73","messageId":"74","endLine":5,"endColumn":26},{"ruleId":"71","severity":1,"message":"76","line":27,"column":5,"nodeType":"73","messageId":"74","endLine":27,"endColumn":18},{"ruleId":"77","severity":1,"message":"78","line":274,"column":19,"nodeType":"79","messageId":"80","endLine":274,"endColumn":21},{"ruleId":"77","severity":1,"message":"81","line":355,"column":73,"nodeType":"79","messageId":"80","endLine":355,"endColumn":75},"no-native-reassign",["82"],"no-negated-in-lhs",["83"],"no-unused-vars","'keyboard' is defined but never used.","Identifier","unusedVar","'hitTestRectangle' is defined but never used.","'tilesetLoaded' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.","no-global-assign","no-unsafe-negation"]